# vim: ft=yaml
Language: Cpp
Standard: Latest

AccessModifierOffset: -4

AlignAfterOpenBracket: Align
AlignArrayOfStructures: Right
AlignConsecutiveAssignments: Consecutive
AlignConsecutiveBitFields: Consecutive
AlignConsecutiveDeclarations: Consecutive
AlignConsecutiveMacros: Consecutive
AlignEscapedNewlines: Left
AlignOperands: AlignAfterOperator
AlignTrailingComments:
  Kind: Always
  OverEmptyLines: 0

AllowAllArgumentsOnNextLine: false
# AllowAllConstructorInitializersOnNextLine: false # deprecated
AllowAllParametersOfDeclarationOnNextLine: true
AllowShortBlocksOnASingleLine: Empty
AllowShortCaseLabelsOnASingleLine: true
AllowShortEnumsOnASingleLine: false
AllowShortFunctionsOnASingleLine: All
AllowShortIfStatementsOnASingleLine: AllIfsAndElse
AllowShortLambdasOnASingleLine: All
AllowShortLoopsOnASingleLine: true

AlwaysBreakAfterDefinitionReturnType: None
AlwaysBreakAfterReturnType: None
AlwaysBreakBeforeMultilineStrings: false
AlwaysBreakTemplateDeclarations: Yes

AttributeMacros: []

BinPackArguments: false
BinPackParameters: false
BitFieldColonSpacing: Both

BreakBeforeBraces: Custom
BraceWrapping:
  AfterCaseLabel:        true
  AfterClass:            true
  AfterControlStatement: Always
  AfterEnum:             true
  AfterExternBlock:      true
  AfterFunction:         true
  AfterNamespace:        true
  AfterStruct:           true
  AfterUnion:            true
  BeforeCatch:           true
  BeforeElse:            true
  BeforeLambdaBody:      true
  BeforeWhile:           true
  IndentBraces:          false
  SplitEmptyFunction:    false
  SplitEmptyNamespace:   false
  SplitEmptyRecord:      false

BreakAfterAttributes: Leave
BreakBeforeBinaryOperators: NonAssignment
BreakBeforeConceptDeclarations: Always
BreakBeforeInlineASMColon: OnlyMultiline
BreakBeforeTernaryOperators: true
BreakConstructorInitializers: BeforeComma
BreakInheritanceList: BeforeComma
BreakStringLiterals: false

ColumnLimit: 120
CommentPragmas:  '^ IWYU pragma:'
CompactNamespaces: false

# ConstructorInitializerAllOnOneLineOrOnePerLine: true # deprecated
ConstructorInitializerIndentWidth: 4
ContinuationIndentWidth: 4
Cpp11BracedListStyle: true
DeriveLineEnding: false
DerivePointerAlignment: false
DisableFormat: false
EmptyLineAfterAccessModifier: Never
EmptyLineBeforeAccessModifier: LogicalBlock
FixNamespaceComments: false

ForEachMacros: []

IfMacros: []

IncludeBlocks: Regroup

IncludeCategories:
- Regex: ^<([[:alnum:]]|_)+>$
  Priority: 1
- Regex: ^<experimental/([[:alnum:]]|_)+>$
  Priority: 2
- Regex: ^<([[:alnum:]]|_)+\.h(pp)?>$
  Priority: 11
- Regex: ^<([[:alnum:]]|_)+/([[:alnum:]]|_)+(\.h(pp)?)?>$
  Priority: 12
- Regex: ^"([[:alnum:]]|_)+/([[:alnum:]]|_)+(\.h(pp)?)?"$
  Priority: 98
- Regex: ^"([[:alnum:]]|_)+(\.h(pp)?)?"$
  Priority: 99

IncludeIsMainRegex: '(_test)?$'
IncludeIsMainSourceRegex: ''

IndentAccessModifiers: false
IndentCaseBlocks: false
IndentCaseLabels: false
IndentExternBlock: NoIndent
IndentGotoLabels: false
IndentPPDirectives: AfterHash
IndentRequiresClause: true
IndentWidth: 4
IndentWrappedFunctionNames: false

InsertBraces: false
InsertNewlineAtEOF: true
InsertTrailingCommas: Wrapped
IntegerLiteralSeparator:
  Binary: 4
  # Decimal: 3
  Hex: 4
KeepEmptyLinesAtTheStartOfBlocks: false
LambdaBodyIndentation: Signature

LineEnding: DeriveLF

MacroBlockBegin: '^.+_(BEGIN|HEAD|START)$'
MacroBlockEnd:   '^.+_(END|STOP)$'

MaxEmptyLinesToKeep: 1
NamespaceIndentation: Inner

NamespaceMacros: []

PPIndentWidth: -1
PackConstructorInitializers: Never

PointerAlignment: Left

QualifierAlignment: Custom
QualifierOrder:
- static
- inline
- const
- constexpr
- volatile
- restrict
- type

# RawStringFormats:
# - Language: Cpp
#   Delimiters:
#   - 'cc'
#   - 'cpp'
#   BasedOnStyle: llvm
#   CanonicalDelimiters: 'cc'

ReferenceAlignment: Pointer
ReflowComments: true
RemoveBracesLLVM: false
RemoveSemicolon: true
RequiresClausePosition: OwnLine
RequiresExpressionIndentation: OuterScope
SeparateDefinitionBlocks: Leave
ShortNamespaceLines: 1

SortIncludes: CaseSensitive
SortUsingDeclarations: true

SpaceAfterCStyleCast: false
SpaceAfterLogicalNot: false
SpaceAfterTemplateKeyword: false
SpaceAroundPointerQualifiers: Default
SpaceBeforeAssignmentOperators: true
SpaceBeforeCaseColon: false
SpaceBeforeCpp11BracedList: false
SpaceBeforeCtorInitializerColon: true
SpaceBeforeInheritanceColon: true
SpaceBeforeParens: ControlStatements
# SpaceBeforeParensOptions:
#   AfterControlStatements: true
#   AfterForeachMacros: true
#   AfterFunctionDeclarationName: false
#   AfterFuncDefinitionName: false
#   AfterIfMacros: true
#   AfterOverloadedOperator: false
#   AfterRequiresInClause: true
#   AfterRequiresInExpression: true
#   BeforeNonEmptyParentheses: false
SpaceBeforeRangeBasedForLoopColon: true
SpaceBeforeSquareBrackets: false
SpaceInEmptyBlock: false
SpaceInEmptyParentheses: false
SpacesBeforeTrailingComments: 1
SpacesInAngles: Never
SpacesInCStyleCastParentheses: false
SpacesInConditionalStatement: false
SpacesInContainerLiterals: false
SpacesInLineCommentPrefix:
  Minimum: 1
  Maximum: -1
SpacesInParentheses: false
SpacesInSquareBrackets: false

StatementAttributeLikeMacros: []

StatementMacros:
- TEST_CASE
- SECTION

TabWidth: 4

TypenameMacros: []

UseCRLF: false
UseTab: Never

WhitespaceSensitiveMacros: []

# Penalty settings
# PenaltyBreakAssignment: 0
# PenaltyBreakBeforeFirstCallParameter: 0
# PenaltyBreakComment: 0
# PenaltyBreakFirstLessLess: 0
# PenaltyBreakOpenParenthesis: 0
# PenaltyBreakString: 0
# PenaltyBreakTemplateDeclaration: 0
# PenaltyExcessCharacter: 0
# PenaltyIndentedWhitespace: 0
# PenaltyReturnTypeOnItsOwnLine: 0
